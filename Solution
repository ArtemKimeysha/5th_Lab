using System;

public class HelloWorld
{
    static void Main(string[] args)
        {
            #region 1-1
            Console.WriteLine("Level 1 number 1");
            int memb = 5;
            int team1 = 8, team2 = 10, team3 = 11;
            Console.WriteLine("{0} from {1} people", form(team1, memb), team1);
            Console.WriteLine("{0} from {1} people", form(team2, memb), team2);
            Console.WriteLine("{0} from {1} people", form(team3, memb), team3);
            #endregion
            
            #region 2-1
            Console.WriteLine("Level 1 number 2");
            int[] side1 = new int[3];
            int[] side2 = new int[3];
            ent(side1);
            ent(side2);
            double Square1 = square(side1[0], side1[1], side1[2], p(side1[0], side1[1], side1[2]));
            double Square2 = square(side2[0], side2[2], side2[2], p(side2[0], side2[1], side2[2]));
            if (Square1 > Square2) Console.WriteLine("Square of 2nd triangle less than 1st");
            else if (Square2 > Square1) Console.WriteLine("Square of 1st triangle less than 2nd");
            else Console.WriteLine("Square is equal");
            #endregion
            
            #region 6-2
            Console.WriteLine("Level 2 number 6");
            int fir = 7;
            int sec = 8;
            double[] A = new double[fir + sec - 2];
            double[] B = new double[sec];
            Console.WriteLine("Enter mass A");
            for (int i = 0; i < fir; i++){
                double.TryParse(Console.ReadLine(), out A[i]);
            }
            Console.WriteLine("Enter mass B");
            for (int i = 0; i < sec; i++){
                double.TryParse(Console.ReadLine(), out B[i]);
            }
            del(A, fir);
            del(B, sec);
            for (int i = fir - 1; i < fir + sec - 2; i++){
                A[i] = B[i - fir + 1];
            }
            for (int i = 0; i < fir + sec - 2; i++){
                Console.Write("{0}", A[i]);
            }
            #endregion
            
            #region 10-2
            Console.WriteLine("Level 10 number 2");
            Console.WriteLine("Enter rows:");
            int rows;
            int cow;
            int.TryParse(Console.ReadLine(), out rows);
            double[,] matrix = new double[rows, rows];
            Console.WriteLine("Elems of matrix:");
            for(int i = 0; i < rows; i++)
            {
                for(int j = 0; j < rows; j++)
                {
                    double.TryParse(Console.ReadLine(), out matrix[i, j]);
                }
            }
            int ind_max = 0;
            int ind_min = 1;
            double maxi = matrix[0, 0];
            double mini = matrix[0, 1];
            for(int i = 0; i < rows; i++)
            {
                for(int j = 0; j < rows; j++)
                {
                    if (i < j)
                    {
                        if (matrix[i, j] < mini)
                        {
                            ind_min = j;
                            mini = matrix[i, j];
                        }
                    }
                    else if (matrix[i, j] > maxi)
                    {
                        ind_max = j;
                        maxi = matrix[i, j];
                    }
                }
            }
            if (ind_max == ind_min)
            {
                exclude(matrix, ind_min, rows);
                cow = rows - 1;
            }
            else
            {
                exclude(matrix, ind_min, rows);
                exclude(matrix, ind_max, rows - 1);
                cow = rows - 2;
            }
            Console.WriteLine("Your matrix:");
            for (int i = 0; i < rows; i++)
            {
                for (int j = 0; j < cow; j++)
                {
                    Console.Write("{0} ", matrix[i, j]);
                }
            }
            #endregion
            
            #region 23-2
            Console.WriteLine("Level 2 number 23");
            Console.WriteLine("Enter row of 1st matrix");
            int row1, row2, col1, col2;
            int.TryParse(Console.ReadLine(), out row1);
            Console.WriteLine("Enter col of 1st matrix");
            int.TryParse(Console.ReadLine(), out col1);
            Console.WriteLine("Enter row of 2nd matrix");
            int.TryParse(Console.ReadLine(), out row2);
            Console.WriteLine("Enter col of 2nd matrix");
            int.TryParse(Console.ReadLine(), out col2);
            double[,] matrix1 = new double[row1, col1];
            double[,] matrix2 = new double[row2, col2];
            Console.WriteLine("Elems of 1st");
            for (int i = 0; i < row1; i++)
            {
                for(int j = 0; j < col1; j++)
                {
                    double.TryParse(Console.ReadLine(), out matrix1[i,j]);
                }
            }
            Console.WriteLine("Elems of 2nd");
            for(int i = 0; i < row2; i++)
            {
                for(int j = 0; j < col2; j++)
                {
                    double.TryParse(Console.ReadLine(), out matrix2[i, j]);
                }
            }
            trans(matrix1, row1, col1);
            trans(matrix2, row2, col2);
            Console.WriteLine("1st matrix:");
            for(int i = 0; i < row1; i++)
            {
                for(int j = 0; j < col1; j++)
                {
                    Console.Write("{0} ", matrix1[i, j]);
                }
                Console.WriteLine();
            }
            Console.WriteLine("2nd matrix:");
            for(int i = 0; i < row2; i++)
            {
                for(int j = 0; j < col2; j++)
                {
                    Console.Write("{0} ", matrix2[i, j]);
                }
                Console.WriteLine();
            }
            #endregion
            
            #region 3-1
            Console.WriteLine("Level 3 number 1");
            double a_1 = 0.1, b_1 = 1.0, h_1 = 0.1;
            double a_2 = Math.PI / 5, b_2 = Math.PI, h_2 = Math.PI / 25;
            Console.WriteLine("Sum 1 = {0}", 1 + summary(fun1, a_1, b_1, h_1));
            Console.WriteLine("Sum 2 = {0}", summary(fun2, a_2, b_2, h_2));
            #endregion
            
            #region 2-3
            Console.WriteLine("Level 3 number 2");
            Random random = new Random();
            Console.WriteLine("Enter size of massive (n, m)");
            int.TryParse(Console.ReadLine(), out int n);
            int.TryParse(Console.ReadLine(), out int m);
            int[,] AA = new int[n, m];
            for (int i = 0; i < n; i++){
                for (int j = 0; j < m; j++){
                    AA[i, j] = random.Next(50);
                }
            }
            for (int i = 0; i < n; i++){
                for (int j = 0; j < m; j++){
                    Console.Write(AA[i, j] + "\t");
                }
                Console.WriteLine();
            }
            Console.WriteLine();
            for (int i = 0; i < n; i++){
                if (i % 2 == 0)
                {
                    method(AA, RowEven, i);
                }
                else
                {
                    method(AA, RowOdd, i);
                }
            }
            for (int i = 0; i < n; i++){
                for (int j = 0; j < m; j++){
                    Console.Write(AA[i, j] + "\t");
                }
                Console.WriteLine();
            }
            #endregion
        }
        
        static int fact(int n)
        {
            int fact = 1;
            for (int i = 1; i < n; i++) fact *= i;
            return fact;
        }
        
        static double form(int x, int k)
        {
            double res = fact(x) / (fact(k) * fact(x - k) * 1.0);
            return res;
        }
        
        static double p(int a, int b, int c)
        {
            return (a + b + c) / 2.0;
        }
        
        static double square(int a, int b, int c, double p)
        {
            return Math.Sqrt(p * (p - a) * (p - b) * (p - c));
        }
        
        static void ent(int[] ar) 
        {
            Console.WriteLine("Enter a, b and c of triangle");
            int.TryParse(Console.ReadLine(), out ar[0]);
            int.TryParse(Console.ReadLine(), out ar[1]);
            int.TryParse(Console.ReadLine(), out ar[2]);
            while (ar[0] + ar[1] < ar[2] || ar[0] + ar[2] < ar[1] || ar[1] + ar[2] < ar[0])
            {
                Console.WriteLine("Error, enter another sides");
                int.TryParse(Console.ReadLine(), out ar[0]);
                int.TryParse(Console.ReadLine(), out ar[1]);
                int.TryParse(Console.ReadLine(), out ar[2]);
            }
        }
        
        static void del(double[] arr, int ind)
        {
            int max_ind = 0;
            for (int i = 0; i < ind; i++){
                if (arr[i] > arr[max_ind]){
                    max_ind = i;
                }
            }
            for (int i = max_ind; i < ind - 1; i++){
                arr[i] = arr[i + 1];
            }
        }
        
        static void exclude(double[,] matrix, int chng, int res)
        {
            for (int i = 0; i < res; i++){
                for (int j = chng; j < res - 1; j++){
                    matrix[i, j] = matrix[i, j + 1];
                }
            }
        }
        
        static void trans(double[,] matrix, int row, int col)
        {
            double[] array = new double[row * col];
            int res = 0;
            for (int i = 0; i < row; i++){
                for (int j = 0; j < col; j++){
                    array[res] = matrix[i, j];
                    res++;
                }
            }
            // now sorted matrix
            int step = array.Length / 2;
            double temp;
            while (step > 0)
            Console.WriteLine(false);
            for (int i = step; i < array.Length; i++){
                int j = i;
                while ((j >= step) && array[j - step] < array[j])
                {
                    temp = array[j - step];
                    array[j - step] = array[j];
                    array[j] = temp;
                    j -= step;
                }
            }
            step /= 2;
            // now transformed it
            int counter = 0;
            for (int i = 0; i < row; i++){
                for(int j = 0; j < col; j++){
                    if (matrix[i, j] == array[0] || matrix[i, j] == array[1] || matrix[i, j] == array[2] || matrix[i, j] == array[3]|| matrix[i, j] == array[4])
                    {
                        if (counter < 5)
                        {
                            if (matrix[i, j] > 0) matrix[i, j] *= 2;
                            else matrix[i, j] /= 2.0;
                            counter++;
                        }
                        else
                        {
                            if (matrix[i, j] > 0) matrix[i, j] /= 2.0;
                            else matrix[i, j] *= 2;
                        }
                    }
                    else
                    {
                        if (matrix[i, j] > 0) matrix[i, j] /= 2.0;
                        else matrix[i, j] *= 2;
                    }
                }
            }
        }
        
        delegate double chl(double x, int i);
        static double fun1(double x, int i)
        {
            double tech = Math.Cos(i * x) / fact(i);
            return tech;
        }
        
        static double fun2(double x, int i)
        {
            double tech = Math.Pow(-1, i) * Math.Cos(i * x) / i * i;
            return tech;
        }
        
        static double summary(chl f, double a, double b, double h)
        {
            double tech = 0;
            int i = 1;
            for (double j = a; j <= b; j += h){
                tech += f(j, i);
                i++;
            }
            return tech;
        }
        
        static void MatrixToArr(int[,] a, int ii, out int[] arr)
        {
            arr = new int[a.GetLength(1)];
            for (int j = 0; j < a.GetLength(1); j++)
            {
                arr[j] = a[ii, j];
            }
        }
        
        delegate void Rows(int[] arr);
        
        static void RowOdd(int[] arr)
        {
            Array.Sort(arr);
            Array.Reverse(arr);
        }
        
        static void RowEven(int[] arr)
        {
            Array.Sort(arr);
        }
        
        static void method(int[,] a, Rows Row, int ii)
        {
            MatrixToArr(a, ii, out int[] arr);
            Row(arr);
            int[] arr1 = arr;
            for (int i = 0; i < arr1.Length; i++)
            {
                a[ii, i] = arr1[i];
            }
        } 
}      
